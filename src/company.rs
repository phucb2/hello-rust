// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
// #![allow(unknown_lints)]
// #![allow(clippy::all)]

// #![allow(unused_attributes)]
// #![cfg_attr(rustfmt, rustfmt::skip)]

// #![allow(box_pointers)]
// #![allow(dead_code)]
// #![allow(missing_docs)]
// #![allow(non_camel_case_types)]
// #![allow(non_snake_case)]
// #![allow(non_upper_case_globals)]
// #![allow(trivial_casts)]
// #![allow(unused_results)]
// #![allow(unused_mut)]


/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Employee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Employee {
    // message fields
    // @@protoc_insertion_point(field:Employee.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Employee.id)
    pub id: i32,
    // @@protoc_insertion_point(field:Employee.role)
    pub role: ::protobuf::EnumOrUnknown<employee::Role>,
    // special fields
    // @@protoc_insertion_point(special_field:Employee.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Employee {
    fn default() -> &'a Employee {
        <Employee as ::protobuf::Message>::default_instance()
    }
}

impl Employee {
    pub fn new() -> Employee {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Employee| { &m.name },
            |m: &mut Employee| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Employee| { &m.id },
            |m: &mut Employee| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &Employee| { &m.role },
            |m: &mut Employee| { &mut m.role },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Employee>(
            "Employee",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Employee {
    const NAME: &'static str = "Employee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.id = is.read_int32()?;
                },
                24 => {
                    self.role = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.id);
        }
        if self.role != ::protobuf::EnumOrUnknown::new(employee::Role::SOFTWARE_ENGINEER) {
            my_size += ::protobuf::rt::int32_size(3, self.role.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        if self.role != ::protobuf::EnumOrUnknown::new(employee::Role::SOFTWARE_ENGINEER) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.role))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Employee {
        Employee::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.role = ::protobuf::EnumOrUnknown::new(employee::Role::SOFTWARE_ENGINEER);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Employee {
        static instance: Employee = Employee {
            name: ::std::string::String::new(),
            id: 0,
            role: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Employee {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Employee").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Employee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Employee {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Employee`
pub mod employee {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Employee.Role)
    pub enum Role {
        // @@protoc_insertion_point(enum_value:Employee.Role.SOFTWARE_ENGINEER)
        SOFTWARE_ENGINEER = 0,
        // @@protoc_insertion_point(enum_value:Employee.Role.PRODUCT_MANAGER)
        PRODUCT_MANAGER = 1,
        // @@protoc_insertion_point(enum_value:Employee.Role.DESIGNER)
        DESIGNER = 2,
    }

    impl ::protobuf::Enum for Role {
        const NAME: &'static str = "Role";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Role> {
            match value {
                0 => ::std::option::Option::Some(Role::SOFTWARE_ENGINEER),
                1 => ::std::option::Option::Some(Role::PRODUCT_MANAGER),
                2 => ::std::option::Option::Some(Role::DESIGNER),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Role> {
            match str {
                "SOFTWARE_ENGINEER" => ::std::option::Option::Some(Role::SOFTWARE_ENGINEER),
                "PRODUCT_MANAGER" => ::std::option::Option::Some(Role::PRODUCT_MANAGER),
                "DESIGNER" => ::std::option::Option::Some(Role::DESIGNER),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Role] = &[
            Role::SOFTWARE_ENGINEER,
            Role::PRODUCT_MANAGER,
            Role::DESIGNER,
        ];
    }

    impl ::protobuf::EnumFull for Role {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Employee.Role").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Role {
        fn default() -> Self {
            Role::SOFTWARE_ENGINEER
        }
    }

    impl Role {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Role>("Employee.Role")
        }
    }
}

// @@protoc_insertion_point(message:Company)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Company {
    // message fields
    // @@protoc_insertion_point(field:Company.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Company.employees)
    pub employees: ::std::vec::Vec<Employee>,
    // special fields
    // @@protoc_insertion_point(special_field:Company.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Company {
    fn default() -> &'a Company {
        <Company as ::protobuf::Message>::default_instance()
    }
}

impl Company {
    pub fn new() -> Company {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Company| { &m.name },
            |m: &mut Company| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "employees",
            |m: &Company| { &m.employees },
            |m: &mut Company| { &mut m.employees },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Company>(
            "Company",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Company {
    const NAME: &'static str = "Company";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.employees.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.employees {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.employees {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Company {
        Company::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.employees.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Company {
        static instance: Company = Company {
            name: ::std::string::String::new(),
            employees: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Company {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Company").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Company {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Company {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcompany.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x94\x01\n\x08Empl\
    oyee\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\
    \x02\x20\x01(\x05R\x02id\x12\"\n\x04role\x18\x03\x20\x01(\x0e2\x0e.Emplo\
    yee.RoleR\x04role\"@\n\x04Role\x12\x15\n\x11SOFTWARE_ENGINEER\x10\0\x12\
    \x13\n\x0fPRODUCT_MANAGER\x10\x01\x12\x0c\n\x08DESIGNER\x10\x02\"F\n\x07\
    Company\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12'\n\temployees\
    \x18\x02\x20\x03(\x0b2\t.EmployeeR\temployees2D\n\x0eCompanyService\x122\
    \n\x0eGetCompanyInfo\x12\x16.google.protobuf.Empty\x1a\x08.CompanyJ\xe6\
    \x04\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\
    \x03\0\x12\x03\x01\0%\n\n\n\x02\x04\0\x12\x04\x03\0\r\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x03\x08\x10\n\x0c\n\x04\x04\0\x04\0\x12\x04\x04\x02\x08\
    \x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x04\x07\x0b\n\r\n\x06\x04\0\x04\
    \0\x02\0\x12\x03\x05\x04\x1a\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\
    \x05\x04\x15\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x05\x18\x19\n\r\n\
    \x06\x04\0\x04\0\x02\x01\x12\x03\x06\x04\x18\n\x0e\n\x07\x04\0\x04\0\x02\
    \x01\x01\x12\x03\x06\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\
    \x06\x16\x17\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x07\x04\x11\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x01\x12\x03\x07\x04\x0c\n\x0e\n\x07\x04\0\x04\0\
    \x02\x02\x02\x12\x03\x07\x0f\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\
    \x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\n\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x10\x11\n\x0b\
    \n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x0f\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x08\n\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\r\x0e\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x0c\x02\x10\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0c\x02\x06\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x07\x0b\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x0c\x0e\x0f\n\n\n\x02\x04\x01\x12\x04\x0f\0\x12\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x0f\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x10\x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x10\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x10\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x11\x02\"\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x11\x0b\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x11\x14\
    \x1d\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x11\x20!\n\n\n\x02\x06\0\
    \x12\x04\x14\0\x16\x01\n\n\n\x03\x06\0\x01\x12\x03\x14\x08\x16\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\x15\x02?\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x15\x06\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x15\x16+\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x156=b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Employee::generated_message_descriptor_data());
            messages.push(Company::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(employee::Role::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
